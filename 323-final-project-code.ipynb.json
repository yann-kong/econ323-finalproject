{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 0. description of project goals "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. visualize data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Clean data for regression \n",
    "\n",
    "## Dependent Variable: \n",
    "- Housing Price Index for each state\n",
    "\n",
    "## Explanatory Variables: \n",
    "- household financial health\n",
    "- mortgage interest rates \n",
    "- household consumption/expenditure \n",
    "- TSX performance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 614,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import qeds\n",
    "from sklearn import linear_model\n",
    "\n",
    "import geopandas as gpd\n",
    "from shapely.geometry import Point\n",
    "\n",
    "import gmaps\n",
    "import gmaps.datasets\n",
    "import requests\n",
    "import json\n",
    "import random\n",
    "import pygeoj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 615,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "# - 2a. load and clean housing data\n",
    "\n",
    "# - read housing price data in\n",
    "housing_data = pd.read_csv(\"project_data/housing-index-by-census-met-area-monthly.csv\", delimiter = \"\\t\")\n",
    "#housing_data.info()\n",
    "\n",
    "# - get date, geography and value only\n",
    "housing_data.tail()\n",
    "housing_data_small = housing_data[[\"REF_DATE\", \"GEO\", \"New housing price indexes\", \"VALUE\"]]\n",
    "# housing_data_small\n",
    "\n",
    "# - drop to keep house only\n",
    "housing_data_small_1 = housing_data_small.loc[housing_data_small[\"New housing price indexes\"] == \"House only\"]\n",
    "housing_data_small_1 \n",
    "\n",
    "# - drop to keep 2010 - 2018 only\n",
    "# housing_data_small_1[[\"REF_DATE\"]]\n",
    "housing_data_small_1[\"Year\"] = \"20\" + housing_data_small_1[\"REF_DATE\"].str[-2:]\n",
    "# housing_data_small_1\n",
    "housing_data_small_2 = housing_data_small_1.loc[pd.to_numeric(housing_data_small_1[\"Year\"]).between(2010, 2017, inclusive=True)]                                                           \n",
    "# housing_data_small_2\n",
    "\n",
    "# - merge index based on GEO\n",
    "housing_data_small_3 = housing_data_small_2.set_index([\"GEO\", \"Year\"])\n",
    "# housing_data_small_3\n",
    "\n",
    "\n",
    "# - get only certain provinces \n",
    "housing_data_small_4 = housing_data_small_3.loc[[\"Alberta\",\n",
    "                                                 \"British Columbia\",\n",
    "                                                \"Saskatchewan\",\n",
    "                                                \"Manitoba\",\n",
    "                                                \"Quebec\", \n",
    "                                                \"Ontario\",\n",
    "                                                 \"Newfoundland and Labrador\",\n",
    "                                                 \"Nova Scotia\",\n",
    "                                                 \"Atlantic Region\",\n",
    "                                                 \"New Brunswick\", \n",
    "                                                 \"Prince Edward Island\"\n",
    "                                                 \n",
    "                    ]]\n",
    "\n",
    "# - average based on year\n",
    "housing_data_small_5 = pd.DataFrame(housing_data_small_4.mean(axis = 1))\n",
    "\n",
    "housing_data_small_5[\"Housing Index\"] = housing_data_small_5[0]\n",
    "\n",
    "#housing_data_small_5\n",
    "\n",
    "# - put year on horizontal \n",
    "housing_data_small_6 = housing_data_small_5.pivot_table(\n",
    "    index=\"Year\",\n",
    "    columns=\"GEO\",\n",
    "    values=\"Housing Index\")\n",
    "\n",
    "housing_data_small_6.to_csv(\"cleaned_data/housing_index.csv\")          \n",
    "\n",
    "housing_index_data_clean = housing_data_small_6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 616,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>GEO</th>\n",
       "      <th>Alberta</th>\n",
       "      <th>Atlantic Region</th>\n",
       "      <th>British Columbia</th>\n",
       "      <th>Manitoba</th>\n",
       "      <th>New Brunswick</th>\n",
       "      <th>Newfoundland and Labrador</th>\n",
       "      <th>Nova Scotia</th>\n",
       "      <th>Ontario</th>\n",
       "      <th>Prince Edward Island</th>\n",
       "      <th>Quebec</th>\n",
       "      <th>Saskatchewan</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <td>93.233333</td>\n",
       "      <td>94.591667</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>98.458333</td>\n",
       "      <td>94.750000</td>\n",
       "      <td>91.016667</td>\n",
       "      <td>76.941667</td>\n",
       "      <td>99.525000</td>\n",
       "      <td>94.491667</td>\n",
       "      <td>95.525000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011</th>\n",
       "      <td>92.800000</td>\n",
       "      <td>96.408333</td>\n",
       "      <td>95.741667</td>\n",
       "      <td>86.475000</td>\n",
       "      <td>98.783333</td>\n",
       "      <td>97.666667</td>\n",
       "      <td>92.466667</td>\n",
       "      <td>80.575000</td>\n",
       "      <td>101.133333</td>\n",
       "      <td>95.941667</td>\n",
       "      <td>97.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012</th>\n",
       "      <td>94.200000</td>\n",
       "      <td>97.166667</td>\n",
       "      <td>94.308333</td>\n",
       "      <td>89.933333</td>\n",
       "      <td>98.016667</td>\n",
       "      <td>97.766667</td>\n",
       "      <td>95.058333</td>\n",
       "      <td>84.533333</td>\n",
       "      <td>101.125000</td>\n",
       "      <td>97.366667</td>\n",
       "      <td>100.391667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>97.450000</td>\n",
       "      <td>98.850000</td>\n",
       "      <td>92.733333</td>\n",
       "      <td>93.591667</td>\n",
       "      <td>98.116667</td>\n",
       "      <td>99.433333</td>\n",
       "      <td>97.791667</td>\n",
       "      <td>86.625000</td>\n",
       "      <td>101.591667</td>\n",
       "      <td>98.550000</td>\n",
       "      <td>102.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>101.308333</td>\n",
       "      <td>99.150000</td>\n",
       "      <td>91.150000</td>\n",
       "      <td>95.025000</td>\n",
       "      <td>97.983333</td>\n",
       "      <td>100.091667</td>\n",
       "      <td>98.150000</td>\n",
       "      <td>88.608333</td>\n",
       "      <td>100.008333</td>\n",
       "      <td>98.825000</td>\n",
       "      <td>103.958333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>101.583333</td>\n",
       "      <td>99.408333</td>\n",
       "      <td>92.483333</td>\n",
       "      <td>96.208333</td>\n",
       "      <td>97.816667</td>\n",
       "      <td>100.183333</td>\n",
       "      <td>98.875000</td>\n",
       "      <td>91.166667</td>\n",
       "      <td>99.783333</td>\n",
       "      <td>98.891667</td>\n",
       "      <td>102.775000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>100.491667</td>\n",
       "      <td>99.625000</td>\n",
       "      <td>98.616667</td>\n",
       "      <td>98.566667</td>\n",
       "      <td>98.641667</td>\n",
       "      <td>100.108333</td>\n",
       "      <td>99.200000</td>\n",
       "      <td>96.866667</td>\n",
       "      <td>100.066667</td>\n",
       "      <td>99.683333</td>\n",
       "      <td>100.350000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>99.958333</td>\n",
       "      <td>99.966667</td>\n",
       "      <td>104.841667</td>\n",
       "      <td>102.783333</td>\n",
       "      <td>100.350000</td>\n",
       "      <td>99.041667</td>\n",
       "      <td>100.741667</td>\n",
       "      <td>102.650000</td>\n",
       "      <td>100.158333</td>\n",
       "      <td>100.666667</td>\n",
       "      <td>99.541667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "GEO      Alberta  Atlantic Region  British Columbia    Manitoba  \\\n",
       "Year                                                              \n",
       "2010   93.233333        94.591667         96.000000   82.000000   \n",
       "2011   92.800000        96.408333         95.741667   86.475000   \n",
       "2012   94.200000        97.166667         94.308333   89.933333   \n",
       "2013   97.450000        98.850000         92.733333   93.591667   \n",
       "2014  101.308333        99.150000         91.150000   95.025000   \n",
       "2015  101.583333        99.408333         92.483333   96.208333   \n",
       "2016  100.491667        99.625000         98.616667   98.566667   \n",
       "2017   99.958333        99.966667        104.841667  102.783333   \n",
       "\n",
       "GEO   New Brunswick  Newfoundland and Labrador  Nova Scotia     Ontario  \\\n",
       "Year                                                                      \n",
       "2010      98.458333                  94.750000    91.016667   76.941667   \n",
       "2011      98.783333                  97.666667    92.466667   80.575000   \n",
       "2012      98.016667                  97.766667    95.058333   84.533333   \n",
       "2013      98.116667                  99.433333    97.791667   86.625000   \n",
       "2014      97.983333                 100.091667    98.150000   88.608333   \n",
       "2015      97.816667                 100.183333    98.875000   91.166667   \n",
       "2016      98.641667                 100.108333    99.200000   96.866667   \n",
       "2017     100.350000                  99.041667   100.741667  102.650000   \n",
       "\n",
       "GEO   Prince Edward Island      Quebec  Saskatchewan  \n",
       "Year                                                  \n",
       "2010             99.525000   94.491667     95.525000  \n",
       "2011            101.133333   95.941667     97.900000  \n",
       "2012            101.125000   97.366667    100.391667  \n",
       "2013            101.591667   98.550000    102.050000  \n",
       "2014            100.008333   98.825000    103.958333  \n",
       "2015             99.783333   98.891667    102.775000  \n",
       "2016            100.066667   99.683333    100.350000  \n",
       "2017            100.158333  100.666667     99.541667  "
      ]
     },
     "execution_count": 616,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "housing_data_small_6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 617,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if sys.path[0] == '':\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "# - 2b. load and clean data for factor group 1: Canadians' financial status \n",
    "income_data = pd.read_csv(\"project_data/household-financial-health-LTV.csv\", delimiter = \",\")\n",
    "# income_data\n",
    "\n",
    "# - only keep Canada level data \n",
    "income_data_small = income_data.loc[income_data[\"GEO\"] == \"Canada\"]\n",
    "\n",
    "# - only keep financial health data \n",
    "income_data_small_1 = income_data_small.loc[income_data_small[\"Characteristics\"] == \"All households\"]\n",
    "\n",
    "# - rename REF_DATE to year \n",
    "income_data_small_1[\"Year\"] = pd.to_numeric(income_data_small_1[\"REF_DATE\"])\n",
    "\n",
    "# - get year between 2010 and 2017 \n",
    "income_data_small_2 = income_data_small_1.loc[(income_data_small_1[\"Year\"]).between(2010, 2017, inclusive=True)] \n",
    "\n",
    "income_data_small_2[\"Year\"] = income_data_small_2[\"Year\"].apply(str)\n",
    "\n",
    "# - set year as index \n",
    "income_data_small_3 = income_data_small_2.pivot_table(\n",
    "index = \"Year\",\n",
    "columns = \"Net worth indicators (wealth)\",\n",
    "values = \"VALUE\")\n",
    "\n",
    "income_data_small_3 = income_data_small_3[[\"Debt to disposable income ratio\"]]\n",
    "\n",
    "# - save as df \n",
    "income_data_small_3.to_csv(\"cleaned_data/canadians_financial_health_clean.csv\")\n",
    "\n",
    "financial_health_stats_clean = income_data_small_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 618,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Net worth indicators (wealth)</th>\n",
       "      <th>Debt to disposable income ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <td>167.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011</th>\n",
       "      <td>169.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012</th>\n",
       "      <td>170.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>169.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>171.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>173.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>182.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>183.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Net worth indicators (wealth)  Debt to disposable income ratio\n",
       "Year                                                          \n",
       "2010                                                     167.2\n",
       "2011                                                     169.7\n",
       "2012                                                     170.0\n",
       "2013                                                     169.9\n",
       "2014                                                     171.8\n",
       "2015                                                     173.4\n",
       "2016                                                     182.3\n",
       "2017                                                     183.0"
      ]
     },
     "execution_count": 618,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "income_data_small_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 619,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py:4133: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  errors=errors,\n"
     ]
    }
   ],
   "source": [
    "# - 2c. load and clean data for factor 2: mortgage interest rates \n",
    "mortgage_data = pd.read_csv(\"project_data/canada-mortage-lending-rate-monthly.csv\")\n",
    "mortgage_data\n",
    "\n",
    "# - keep only 2010 to 2018 data \n",
    "mortgage_data[\"Year\"] = mortgage_data[\"REF_DATE\"].str[:4]\n",
    "mortgage_data_small = mortgage_data.loc[pd.to_numeric(mortgage_data[\"Year\"]).between(2010, 2017, inclusive=True)]\n",
    "\n",
    "\n",
    "# - get average mortgage rate for each year \n",
    "mortgage_data_small_1 = mortgage_data_small[[\"Year\", \n",
    "                                             \"VALUE\"\n",
    "                                            ]]\n",
    "\n",
    "mortgage_data_small_1.rename(columns = {'VALUE':'Mortgage Rate'}, inplace = True) \n",
    "\n",
    "mortgage_data_small_2 = mortgage_data_small_1.groupby(\"Year\")\n",
    "\n",
    "mortgage_data_small_3 = mortgage_data_small_2.mean()\n",
    "\n",
    "# - write to csv \n",
    "mortgage_data_small_3.to_csv(\"cleaned_data/mortgage_rate_clean.csv\")\n",
    "\n",
    "mortgage_rate_clean = mortgage_data_small_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 620,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mortgage Rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <td>4.815000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011</th>\n",
       "      <td>4.569167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012</th>\n",
       "      <td>4.236667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>4.170000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>4.076667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>3.770833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>3.700833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>3.789167</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Mortgage Rate\n",
       "Year               \n",
       "2010       4.815000\n",
       "2011       4.569167\n",
       "2012       4.236667\n",
       "2013       4.170000\n",
       "2014       4.076667\n",
       "2015       3.770833\n",
       "2016       3.700833\n",
       "2017       3.789167"
      ]
     },
     "execution_count": 620,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mortgage_rate_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 621,
   "metadata": {},
   "outputs": [],
   "source": [
    "# - 2d. get factor group 3: household consumption/expenditure \n",
    "household_spending = pd.read_csv(\"project_data/expenditure-consumption-by-region-annual.csv\", delimiter = \"\\t\")\n",
    "\n",
    "# - keep national level data only \n",
    "household_spending_small = household_spending.loc[household_spending[\"GEO\"] == \"Canada\"]\n",
    "\n",
    "# - keep 2010 to 2018 data only \n",
    "household_spending_small_1 = household_spending_small.loc[pd.to_numeric(household_spending_small[\"REF_DATE\"]).between(2010, 2018, inclusive=True)]                                                           \n",
    "\n",
    "# - keep expenditure and consumption only \n",
    "household_spending_small_2 = household_spending_small_1.set_index(\"Household expenditures, summary-level categories\")\n",
    "household_spending_small_3 = household_spending_small_2.loc[[\"Total expenditure\",\n",
    "                                                            \"Total current consumption\"]]\n",
    "\n",
    "# - reshape to set index and year \n",
    "household_spending_small_3.rename(columns = {'REF_DATE':'Year'}, inplace = True) \n",
    "\n",
    "household_spending_small_3[\"Year\"] = household_spending_small_3[\"Year\"].apply(str)\n",
    "\n",
    "\n",
    "household_spending_small_4 = household_spending_small_3.pivot_table(\n",
    "index = \"Year\", \n",
    "columns = \"Household expenditures, summary-level categories\", \n",
    "values = \"VALUE\")\n",
    "\n",
    "# - write to dataframe \n",
    "household_spending_small_4.to_csv(\"cleaned_data/consumption_expenditure_clean.csv\")\n",
    "\n",
    "\n",
    "household_spending_clean = household_spending_small_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 622,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 8 entries, 2010 to 2017\n",
      "Data columns (total 2 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Total current consumption  8 non-null      float64\n",
      " 1   Total expenditure          8 non-null      float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 192.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "household_spending_clean.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 623,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "# - 2d. get factor 4: tsx performance \n",
    "tsx_data = pd.read_csv(\"project_data/tsx-monthly.csv\")\n",
    "\n",
    "# - keep only 2009 - 2019\n",
    "tsx_data[\"Year\"] = tsx_data[\"REF_DATE\"].str[:4]\n",
    "tsx_data_small = tsx_data.loc[pd.to_numeric(tsx_data[\"Year\"]).between(2009, 2017, inclusive=True)]\n",
    "\n",
    "# - index by tse stats\n",
    "tsx_data_small_1 = tsx_data_small.set_index(\"Toronto Stock Exchange Statistics\")\n",
    "tsx_data_small_2 = tsx_data_small_1.loc[[\"Standard and Poor's/Toronto Stock Exchange Composite Index, close\"]]\n",
    "\n",
    "# - get time series data \n",
    "tsx_data_small_3 = tsx_data_small_2.set_index(\"Year\")\n",
    "tsx_data_small_4 = tsx_data_small_3[[\"VALUE\",\n",
    "                                    \"REF_DATE\"]]\n",
    "\n",
    "# - get yearly change \n",
    "tsx_data_small_4[\"Month\"] = tsx_data_small_4[\"REF_DATE\"].str[-2:]\n",
    "tsx_data_small_5 = tsx_data_small_4.pivot_table(columns = \"Month\",\n",
    "                                                index = \"Year\", \n",
    "                                                values = \"VALUE\"\n",
    "                                               )\n",
    "\n",
    "tsx_data_small_5[\"Pct yearly change in TSX\"] = 100*((tsx_data_small_5[\"12\"] - tsx_data_small_5[\"01\"])/tsx_data_small_5[\"01\"])\n",
    "\n",
    "# - get time series \n",
    "tsx_data_small_6 = tsx_data_small_5.reset_index()\n",
    "tsx_data_small_7 = tsx_data_small_6[[\"Year\", \"Pct yearly change in TSX\"]]\n",
    "\n",
    "# - write to csv\n",
    "tsx_data_small_7.to_csv(\"cleaned_data/tsx_change_clean.csv\")\n",
    "\n",
    "tsx_change_clean = tsx_data_small_7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 624,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Month</th>\n",
       "      <th>Year</th>\n",
       "      <th>Pct yearly change in TSX</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2009</td>\n",
       "      <td>35.091950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010</td>\n",
       "      <td>21.172204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011</td>\n",
       "      <td>-11.783509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012</td>\n",
       "      <td>-0.149532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013</td>\n",
       "      <td>7.381098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2014</td>\n",
       "      <td>6.845594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2015</td>\n",
       "      <td>-11.336983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2016</td>\n",
       "      <td>19.228163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2017</td>\n",
       "      <td>5.350137</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Month  Year  Pct yearly change in TSX\n",
       "0      2009                 35.091950\n",
       "1      2010                 21.172204\n",
       "2      2011                -11.783509\n",
       "3      2012                 -0.149532\n",
       "4      2013                  7.381098\n",
       "5      2014                  6.845594\n",
       "6      2015                -11.336983\n",
       "7      2016                 19.228163\n",
       "8      2017                  5.350137"
      ]
     },
     "execution_count": 624,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tsx_change_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 625,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# - 2e. merge datasets into 1 df \n",
    "\n",
    "# housing_index_data_clean\n",
    "# mortgage_rate_clean\n",
    "# tsx_change_clean\n",
    "# household_spending_clean\n",
    "# financial_health_stats_clean\n",
    "\n",
    "# - merge housing index and mortgage rate\n",
    "merge1 = pd.merge(mortgage_rate_clean, housing_index_data_clean, on = \"Year\")\n",
    "\n",
    "# - merge in tsx change \n",
    "merge2 = pd.merge(merge1, tsx_change_clean, on = \"Year\")\n",
    "\n",
    "# - merge in household spending \n",
    "merge3 = pd.merge(merge2, household_spending_clean, on = \"Year\")\n",
    "\n",
    "# - merge in financial health stats \n",
    "merge4 = pd.merge(merge3, financial_health_stats_clean, on = \"Year\")\n",
    "\n",
    "regression_data = merge4.set_index(\"Year\")\n",
    "\n",
    "# - write to csv \n",
    "regression_data.to_csv(\"cleaned_data/regression_data\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 626,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mortgage Rate</th>\n",
       "      <th>Alberta</th>\n",
       "      <th>Atlantic Region</th>\n",
       "      <th>British Columbia</th>\n",
       "      <th>Manitoba</th>\n",
       "      <th>New Brunswick</th>\n",
       "      <th>Newfoundland and Labrador</th>\n",
       "      <th>Nova Scotia</th>\n",
       "      <th>Ontario</th>\n",
       "      <th>Prince Edward Island</th>\n",
       "      <th>Quebec</th>\n",
       "      <th>Saskatchewan</th>\n",
       "      <th>Pct yearly change in TSX</th>\n",
       "      <th>Total current consumption</th>\n",
       "      <th>Total expenditure</th>\n",
       "      <th>Debt to disposable income ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <td>4.815000</td>\n",
       "      <td>93.233333</td>\n",
       "      <td>94.591667</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>98.458333</td>\n",
       "      <td>94.750000</td>\n",
       "      <td>91.016667</td>\n",
       "      <td>76.941667</td>\n",
       "      <td>99.525000</td>\n",
       "      <td>94.491667</td>\n",
       "      <td>95.525000</td>\n",
       "      <td>21.172204</td>\n",
       "      <td>54013.0</td>\n",
       "      <td>72075.0</td>\n",
       "      <td>167.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011</th>\n",
       "      <td>4.569167</td>\n",
       "      <td>92.800000</td>\n",
       "      <td>96.408333</td>\n",
       "      <td>95.741667</td>\n",
       "      <td>86.475000</td>\n",
       "      <td>98.783333</td>\n",
       "      <td>97.666667</td>\n",
       "      <td>92.466667</td>\n",
       "      <td>80.575000</td>\n",
       "      <td>101.133333</td>\n",
       "      <td>95.941667</td>\n",
       "      <td>97.900000</td>\n",
       "      <td>-11.783509</td>\n",
       "      <td>55227.0</td>\n",
       "      <td>73646.0</td>\n",
       "      <td>169.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012</th>\n",
       "      <td>4.236667</td>\n",
       "      <td>94.200000</td>\n",
       "      <td>97.166667</td>\n",
       "      <td>94.308333</td>\n",
       "      <td>89.933333</td>\n",
       "      <td>98.016667</td>\n",
       "      <td>97.766667</td>\n",
       "      <td>95.058333</td>\n",
       "      <td>84.533333</td>\n",
       "      <td>101.125000</td>\n",
       "      <td>97.366667</td>\n",
       "      <td>100.391667</td>\n",
       "      <td>-0.149532</td>\n",
       "      <td>56330.0</td>\n",
       "      <td>75695.0</td>\n",
       "      <td>170.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>4.170000</td>\n",
       "      <td>97.450000</td>\n",
       "      <td>98.850000</td>\n",
       "      <td>92.733333</td>\n",
       "      <td>93.591667</td>\n",
       "      <td>98.116667</td>\n",
       "      <td>99.433333</td>\n",
       "      <td>97.791667</td>\n",
       "      <td>86.625000</td>\n",
       "      <td>101.591667</td>\n",
       "      <td>98.550000</td>\n",
       "      <td>102.050000</td>\n",
       "      <td>7.381098</td>\n",
       "      <td>58576.0</td>\n",
       "      <td>79098.0</td>\n",
       "      <td>169.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>4.076667</td>\n",
       "      <td>101.308333</td>\n",
       "      <td>99.150000</td>\n",
       "      <td>91.150000</td>\n",
       "      <td>95.025000</td>\n",
       "      <td>97.983333</td>\n",
       "      <td>100.091667</td>\n",
       "      <td>98.150000</td>\n",
       "      <td>88.608333</td>\n",
       "      <td>100.008333</td>\n",
       "      <td>98.825000</td>\n",
       "      <td>103.958333</td>\n",
       "      <td>6.845594</td>\n",
       "      <td>59055.0</td>\n",
       "      <td>80727.0</td>\n",
       "      <td>171.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>3.770833</td>\n",
       "      <td>101.583333</td>\n",
       "      <td>99.408333</td>\n",
       "      <td>92.483333</td>\n",
       "      <td>96.208333</td>\n",
       "      <td>97.816667</td>\n",
       "      <td>100.183333</td>\n",
       "      <td>98.875000</td>\n",
       "      <td>91.166667</td>\n",
       "      <td>99.783333</td>\n",
       "      <td>98.891667</td>\n",
       "      <td>102.775000</td>\n",
       "      <td>-11.336983</td>\n",
       "      <td>60516.0</td>\n",
       "      <td>82697.0</td>\n",
       "      <td>173.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>3.700833</td>\n",
       "      <td>100.491667</td>\n",
       "      <td>99.625000</td>\n",
       "      <td>98.616667</td>\n",
       "      <td>98.566667</td>\n",
       "      <td>98.641667</td>\n",
       "      <td>100.108333</td>\n",
       "      <td>99.200000</td>\n",
       "      <td>96.866667</td>\n",
       "      <td>100.066667</td>\n",
       "      <td>99.683333</td>\n",
       "      <td>100.350000</td>\n",
       "      <td>19.228163</td>\n",
       "      <td>62183.0</td>\n",
       "      <td>84489.0</td>\n",
       "      <td>182.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>3.789167</td>\n",
       "      <td>99.958333</td>\n",
       "      <td>99.966667</td>\n",
       "      <td>104.841667</td>\n",
       "      <td>102.783333</td>\n",
       "      <td>100.350000</td>\n",
       "      <td>99.041667</td>\n",
       "      <td>100.741667</td>\n",
       "      <td>102.650000</td>\n",
       "      <td>100.158333</td>\n",
       "      <td>100.666667</td>\n",
       "      <td>99.541667</td>\n",
       "      <td>5.350137</td>\n",
       "      <td>63723.0</td>\n",
       "      <td>86070.0</td>\n",
       "      <td>183.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Mortgage Rate     Alberta  Atlantic Region  British Columbia  \\\n",
       "Year                                                                 \n",
       "2010       4.815000   93.233333        94.591667         96.000000   \n",
       "2011       4.569167   92.800000        96.408333         95.741667   \n",
       "2012       4.236667   94.200000        97.166667         94.308333   \n",
       "2013       4.170000   97.450000        98.850000         92.733333   \n",
       "2014       4.076667  101.308333        99.150000         91.150000   \n",
       "2015       3.770833  101.583333        99.408333         92.483333   \n",
       "2016       3.700833  100.491667        99.625000         98.616667   \n",
       "2017       3.789167   99.958333        99.966667        104.841667   \n",
       "\n",
       "        Manitoba  New Brunswick  Newfoundland and Labrador  Nova Scotia  \\\n",
       "Year                                                                      \n",
       "2010   82.000000      98.458333                  94.750000    91.016667   \n",
       "2011   86.475000      98.783333                  97.666667    92.466667   \n",
       "2012   89.933333      98.016667                  97.766667    95.058333   \n",
       "2013   93.591667      98.116667                  99.433333    97.791667   \n",
       "2014   95.025000      97.983333                 100.091667    98.150000   \n",
       "2015   96.208333      97.816667                 100.183333    98.875000   \n",
       "2016   98.566667      98.641667                 100.108333    99.200000   \n",
       "2017  102.783333     100.350000                  99.041667   100.741667   \n",
       "\n",
       "         Ontario  Prince Edward Island      Quebec  Saskatchewan  \\\n",
       "Year                                                               \n",
       "2010   76.941667             99.525000   94.491667     95.525000   \n",
       "2011   80.575000            101.133333   95.941667     97.900000   \n",
       "2012   84.533333            101.125000   97.366667    100.391667   \n",
       "2013   86.625000            101.591667   98.550000    102.050000   \n",
       "2014   88.608333            100.008333   98.825000    103.958333   \n",
       "2015   91.166667             99.783333   98.891667    102.775000   \n",
       "2016   96.866667            100.066667   99.683333    100.350000   \n",
       "2017  102.650000            100.158333  100.666667     99.541667   \n",
       "\n",
       "      Pct yearly change in TSX  Total current consumption  Total expenditure  \\\n",
       "Year                                                                           \n",
       "2010                 21.172204                    54013.0            72075.0   \n",
       "2011                -11.783509                    55227.0            73646.0   \n",
       "2012                 -0.149532                    56330.0            75695.0   \n",
       "2013                  7.381098                    58576.0            79098.0   \n",
       "2014                  6.845594                    59055.0            80727.0   \n",
       "2015                -11.336983                    60516.0            82697.0   \n",
       "2016                 19.228163                    62183.0            84489.0   \n",
       "2017                  5.350137                    63723.0            86070.0   \n",
       "\n",
       "      Debt to disposable income ratio  \n",
       "Year                                   \n",
       "2010                            167.2  \n",
       "2011                            169.7  \n",
       "2012                            170.0  \n",
       "2013                            169.9  \n",
       "2014                            171.8  \n",
       "2015                            173.4  \n",
       "2016                            182.3  \n",
       "2017                            183.0  "
      ]
     },
     "execution_count": 626,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regression_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 627,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 8 entries, 2010 to 2017\n",
      "Data columns (total 16 columns):\n",
      " #   Column                           Non-Null Count  Dtype  \n",
      "---  ------                           --------------  -----  \n",
      " 0   Mortgage Rate                    8 non-null      float64\n",
      " 1   Alberta                          8 non-null      float64\n",
      " 2   Atlantic Region                  8 non-null      float64\n",
      " 3   British Columbia                 8 non-null      float64\n",
      " 4   Manitoba                         8 non-null      float64\n",
      " 5   New Brunswick                    8 non-null      float64\n",
      " 6   Newfoundland and Labrador        8 non-null      float64\n",
      " 7   Nova Scotia                      8 non-null      float64\n",
      " 8   Ontario                          8 non-null      float64\n",
      " 9   Prince Edward Island             8 non-null      float64\n",
      " 10  Quebec                           8 non-null      float64\n",
      " 11  Saskatchewan                     8 non-null      float64\n",
      " 12  Pct yearly change in TSX         8 non-null      float64\n",
      " 13  Total current consumption        8 non-null      float64\n",
      " 14  Total expenditure                8 non-null      float64\n",
      " 15  Debt to disposable income ratio  8 non-null      float64\n",
      "dtypes: float64(16)\n",
      "memory usage: 1.1+ KB\n"
     ]
    }
   ],
   "source": [
    "regression_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Multivariate Linear Regression \n",
    "- Regress housing index for each state on all other factors \n",
    "- Compute R squared value for each state "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 628,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mortgage Rate                      4.762162\n",
       "Pct yearly change in TSX          -0.004237\n",
       "Total current consumption         -0.004873\n",
       "Total expenditure                  0.004208\n",
       "Debt to disposable income ratio    0.012228\n",
       "dtype: float64"
      ]
     },
     "execution_count": 628,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# - 3a. write regression function to get R squared value for Alberta \n",
    "\n",
    "# - get explanatory vars \n",
    "X = regression_data.drop([\"Alberta\",\n",
    "                           \"British Columbia\",\n",
    "                           \"Saskatchewan\",\n",
    "                           \"Manitoba\",\n",
    "                           \"Quebec\", \n",
    "                           \"Ontario\",\n",
    "                           \"Newfoundland and Labrador\",\n",
    "                           \"Nova Scotia\",\n",
    "                           \"Atlantic Region\",\n",
    "                           \"New Brunswick\",\n",
    "                           \"Prince Edward Island\"], axis = 1).copy()\n",
    "\n",
    "# - get y for Alberta \n",
    "ab_true = regression_data[\"Alberta\"]\n",
    "\n",
    "# - set the model instance for Alberta\n",
    "alberta_model = linear_model.LinearRegression()\n",
    "alberta_model.fit(X, ab_true)\n",
    "\n",
    "# - print coefficients to check\n",
    "alberta_model.intercept_\n",
    "# intercept : -101.25278654861009\n",
    "alberta_coefs = pd.Series(dict(zip(list(X), alberta_model.coef_)))\n",
    "alberta_coefs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 629,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9980974429565153"
      ]
     },
     "execution_count": 629,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# - get R-squared value for Alberta : \n",
    "# - higher. R squared value means higher cointegration of Alberta's housing returns with Canada economy \n",
    "ab_r2 = alberta_model.score(X, ab_true)\n",
    "ab_r2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 630,
   "metadata": {},
   "outputs": [],
   "source": [
    "# - 3b. get r2 score for all other variables\n",
    "\n",
    "def get_r2_score(province:str, df:pd.DataFrame, x:pd.DataFrame):  \n",
    "    \"\"\"\n",
    "    get r2 value for each province\n",
    "    \"\"\"\n",
    "    # explanatory vars \n",
    "    province_true = df[province]\n",
    "    \n",
    "    # set model instance \n",
    "    province_model = linear_model.LinearRegression()\n",
    "    province_model.fit(X, province_true)\n",
    "    \n",
    "    # get r2 \n",
    "    r2 = province_model.score(X, province_true)\n",
    "    \n",
    "    return r2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 631,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9597872104316099"
      ]
     },
     "execution_count": 631,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_r2_score(\"Quebec\", regression_data, X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 632,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.9980974429565153, 0.9589168318193225, 0.8937776160185708, 0.980796472586468, 0.9597872104316099, 0.9888087762676258, 0.8721378246494025, 0.9866978609898331, 0.9592097750652356, 0.9746426463172327, 0.6031358798259365]\n"
     ]
    }
   ],
   "source": [
    "# - get dataframe of r2 scores\n",
    "\n",
    "province  = [\"Alberta\",\n",
    "                           \"British Columbia\",\n",
    "                           \"Saskatchewan\",\n",
    "                           \"Manitoba\",\n",
    "                           \"Quebec\", \n",
    "                           \"Ontario\",\n",
    "                           \"Newfoundland and Labrador\",\n",
    "                           \"Nova Scotia\",\n",
    "                           \"Atlantic Region\",\n",
    "                           \"New Brunswick\",\n",
    "                           \"Prince Edward Island\"]\n",
    "\n",
    "r2 = []\n",
    "for p in province:\n",
    "    score = get_r2_score(p, regression_data, X)\n",
    "    r2.append(score)  \n",
    "print (r2)\n",
    "   \n",
    "r2_scores = pd.DataFrame({\"province\":province, \n",
    "                          \"r2score\":r2})\n",
    "\n",
    "# - write to csv \n",
    "r2_scores.to_csv(\"cleaned_data/r2_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 633,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>province</th>\n",
       "      <th>r2score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alberta</td>\n",
       "      <td>0.998097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>British Columbia</td>\n",
       "      <td>0.958917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Saskatchewan</td>\n",
       "      <td>0.893778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Manitoba</td>\n",
       "      <td>0.980796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Quebec</td>\n",
       "      <td>0.959787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Ontario</td>\n",
       "      <td>0.988809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Newfoundland and Labrador</td>\n",
       "      <td>0.872138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Nova Scotia</td>\n",
       "      <td>0.986698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Atlantic Region</td>\n",
       "      <td>0.959210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>New Brunswick</td>\n",
       "      <td>0.974643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Prince Edward Island</td>\n",
       "      <td>0.603136</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     province   r2score\n",
       "0                     Alberta  0.998097\n",
       "1            British Columbia  0.958917\n",
       "2                Saskatchewan  0.893778\n",
       "3                    Manitoba  0.980796\n",
       "4                      Quebec  0.959787\n",
       "5                     Ontario  0.988809\n",
       "6   Newfoundland and Labrador  0.872138\n",
       "7                 Nova Scotia  0.986698\n",
       "8             Atlantic Region  0.959210\n",
       "9               New Brunswick  0.974643\n",
       "10       Prince Edward Island  0.603136"
      ]
     },
     "execution_count": 633,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 634,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4. Perform robustness check \n",
    "# - knn cluster analysis to see how provinces distributed relative to each variable "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 635,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5. load results onto map \n",
    "\n",
    "# - get google maps api \n",
    "apikey = \"AIzaSyDzJhxiVPyQ4y0Ycb9f3hJ5vyzxMbjmdB4\"\n",
    "gmaps.configure(api_key = apikey)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 6. plot layer 1 onto map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 7. plot layer 2 onto map "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 8. plot layer 3 onto map "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
